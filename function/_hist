#compdef hist
[[ -z $_HIST__OPTS || -z $_HIST__ARGS ]] && autoload -Uz hist && hist -fs l &> /dev/null

local key val

local -a options=()
for key val in ${(kv)_HIST__OPTS}; do
  options+=( "${key}[$val]" )
done

local -a actions=()
for key val in ${(kv)_HIST__ARGS}; do
  actions+=( "$key\:'$val'" )
done

local context state state_descr line
typeset -A opt_args
_arguments -s -A '' $options ":action:(($actions))" ":index, offset or pattern:->selection"

if [[ $state == 'selection' ]]; then
  local -a keys=( "${(@k)history}" )
  local -a displays=() matches=()
  local -i len=$(( COLUMNS - 1 ))
  case $words[CURRENT] in
    (|-[[:digit:]]#))
      local -a offsets=( {-1..-$#keys} )

      matches=( "${(@)offsets[1,16]}" )
      if [[ $words[CURRENT] != (|-) ]]; then
        local -A map=( "${(@)offsets:^keys}" )
        matches=( "${(@nO)map[(I)$words[CURRENT]*]}" )
        if (( $#matches == 0 )); then
          matches=( "${(@)offsets[1,16]}" )
        elif (( $#matches > 16 )); then
          matches=( "${(@)matches[-16,-1]}" )
        fi
      fi

      local -i m; local d; for m in $matches; do
        d="${(pl:$#SAVEHIST+1:)m} ${(pl:$#SAVEHIST:)keys[-m]}  ${(Z+C+)history[$keys[-m]]}"
        displays+=( "${(pr:len:)d}" )
      done
      ;;
    [[:digit:]]##)
      matches=( "${(@kno)history[(I)$words[CURRENT]*]}" )

      if (( $#matches == 0 )); then
        matches=( "${(@k)history[1,16]}" )
      elif (( $#matches > 16 )); then
        matches=( "${(@)matches[1,16]}" )
      fi

      local -i m; local d; for m in $matches; do
        d="${(pl:$#SAVEHIST:)m}  ${(Z+C+)history[$m]}"
        displays+=( "${(pr:len:)d}" )
      done
      ;;
    *)
      typeset -aU unique=()
      for key in $keys; do
        unique+=( "${matches[$key]%%[[:space:]]*} *" )
        (( $#unique >= 16 )) && break
      done
      if [[ -v compstate[quote] ]]; then
        matches=( "${(@)unique}" )
      else
        matches=( "${(q-@)unique}" )
      fi
      ;;
  esac

  local expl
  _description hist-selection expl 'index, offset or pattern'
  compadd "$expl[@]" -Q -ld displays -a matches
fi
