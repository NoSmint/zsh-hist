#!/bin/zsh
emulate -L zsh -o noshortloops -o warncreateglobal -o extendedglob
zmodload -F zsh/parameter p:history
zmodload -F zsh/zutil b:zparseopts

typeset -gHA _HIST__OPTS=(
  -f 'force:       never ask for confirmation'
  -i 'interactive: always ask for confirmation'
  -s 'silent:      do not print anything'
)
typeset -gHA _HIST__ARGS=(
  d  'delete: remove from history'
  e  'edit:   remove from history, then modify & append as new'
  f  'fix:    remove from history, then load into buffer'
  g  'get:    load into buffer'
  l  'list:   look, but do not touch'
  r  'reload: re-initialize local history from file'
  u  'undo:   roll back to before last action in same session'
)

.hist.fcparams() {
  local -a err=()
  [[ -z $HISTFILE ]] &&
    err+=( 'hist: error: $HISTFILE has not been set' )
  (( SAVEHIST == 0 )) &&
    err+=( 'hist: error: $SAVEHIST is equal to 0' )
  (( HISTSIZE < 1.2 * SAVEHIST )) &&
    print -l -u2 - 'hist: warning: $HISTSIZE should be at least 20% larger than $SAVEHIST'

  (( $#err[@] > 0 )) &&
    print -l -u2 - $err[@]
  return $#err[@]
}

.hist.yes() {
  [[ -v opts[-f] ]] &&
    return 0

  print -lnPr - '' "%B$1%b"
  read -q '? [y/n] '; local ret=$?
  print -l
  return ret
}

hist() {
  emulate -L zsh -o noshortloops -o warncreateglobal -o extendedglob

  local -A opts=()
  local REPLY

  zparseopts -D -A opts f i s v
  local act=$1 sel=$2

  if [[ $act != [${(kj::)_HIST__ARGS}] && ! -v opts[-s] ]]; then
    autoload -Uz .hist.help
    .hist.help
    return 1
  fi

  case $act in
    r)
      .hist.fcparams ||
        return

      .hist.yes "Replace current history with contents of $HISTFILE?" &&
        builtin fc -p $HISTFILE $HISTSIZE $SAVEHIST
      return
      ;;
    u)
      if .hist.yes "Revert last 'hist' action & all entries since then?"; then
        builtin fc -P
        local ret=$?
        if (( ? == 0 )); then
          builtin fc -W
          [[ -v opts[-s] ]] ||
            print 'Revert successful. Previous history restored.'
        else
          [[ -v opts[-s] ]] ||
            print 'Unable to revert. No restore points available in this session.'
        fi
        return ret
      fi
      return
      ;;
  esac

  local -A entries=()
  local HISTORY_IGNORE
  [[ -z $sel ]] &&
    sel=0
  case $sel in
    0)
      local suffix=' #:hist:push-line:'
      HISTORY_IGNORE='*'$suffix
      entries=( "${(@kv)history[(R)$~HISTORY_IGNORE]%$suffix}" )
      ;;
    <1->)
      HISTORY_IGNORE=${(b)history[$sel]}
      entries[$sel]=$history[$sel]
      ;;
    -<1->)
      sel=${${(@k)history}[-sel]}
      HISTORY_IGNORE=${(b)history[$sel]}
      entries[$sel]=$history[$sel]
      ;;
    *)
      HISTORY_IGNORE=$sel
      entries=( "${(@kv)history[(R)$sel]}" )
      ;;
  esac

  if [[ ! -v opts[-s] ]]; then
    local key value faint=$'\e[2m' reverse=$'\e[7m' none=$'\e[0m'
    for key in ${(@kn)entries}; do
      print -r - "$faint${(l:$#HISTCMD:)key}$none" \
        "${entries[$key]//(#m)[^[:print:]]##/$reverse${${${(q+)MATCH}#$\'}%\'}$none}"
    done
  fi

  if (( $#entries == 0 )); then
    [[ -v opts[-s] ]] ||
      print "No ${${${sel:#0}:+matching history entries}:-pushed lines} found."
    return 1
  fi

  if [[ $act != [gl] ]]; then
    .hist.fcparams ||
      return

    local single_plural="${#entries} entries"; (( $#entries == 1 )) &&
      single_plural='1 entry'

    local msg="Delete the $single_plural above from history?"; [[ $act == e ]] &&
      msg="Merge the $single_plural above for editing?"

    if (( $#entries == 1 )) && [[ ! -v opts[-i] ]] || .hist.yes $msg; then
      builtin fc -W
      builtin fc -p $HISTFILE $HISTSIZE $SAVEHIST
      [[ $act != e && ! -v opts[-s] ]] &&
        print "$single_plural deleted."
    else
      [[ -v opts[-s] ]] ||
        print -l '' '0 entries deleted.'
      return 1
    fi
  fi

  case $act in
    e)
      local new=${(vF)entries}
      {
        vared new
      } always {
        if (( TRY_BLOCK_INTERRUPT > 0 )); then
          TRY_BLOCK_INTERRUPT=0
          {
            builtin fc -P
          } always {
            builtin fc -W
            print -l - '' 'Deleted entries restored.'
          }
        else
          print -s $new
          builtin fc -W
          [[ -v opts[-s] ]] ||
            print -l '' 'New entry saved.'
        fi
      }
      ;;
    [fg])
      print -z ${(Fv)entries}
      ;;
  esac

  setopt NO_warncreateglobal
  reply=( "${(@kv)entries}" )
}

hist "$@"
